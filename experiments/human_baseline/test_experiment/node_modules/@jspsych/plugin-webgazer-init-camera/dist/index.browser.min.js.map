{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"webgazer-init-camera\",\n  parameters: {\n    /** Instruction text */\n    instructions: {\n      type: ParameterType.HTML_STRING,\n      default: `\n            <p>Position your head so that the webcam has a good view of your eyes.</p>\n            <p>Center your face in the box and look directly towards the camera.</p>\n            <p>It is important that you try and keep your head reasonably still throughout the experiment, so please take a moment to adjust your setup to be comfortable.</p>\n            <p>When your face is centered in the box and the box is green, you can click to continue.</p>`,\n    },\n    /** Text for the button that participants click to end the trial. */\n    button_text: {\n      type: ParameterType.STRING,\n      default: \"Continue\",\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **webgazer-init-camera**\n *\n * jsPsych plugin for initializing the webcam and helping the participant center their face in the camera view.\n * Intended for use with the WebGazer eye-tracking extension.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-webgazer-init-camera/ webgazer-init-camera plugin} and\n * {@link https://www.jspsych.org/overview/eye-tracking/ eye-tracking overview} documentation on jspsych.org\n */\nclass WebgazerInitCameraPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    let trial_complete;\n\n    var start_time = performance.now();\n    var load_time: number;\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      this.jsPsych.extensions[\"webgazer\"].pause();\n      this.jsPsych.extensions[\"webgazer\"].hideVideo();\n\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // gather the data to store for the trial\n      var trial_data = {\n        load_time: load_time,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      document.querySelector(\"#webgazer-center-style\").remove();\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n\n      trial_complete();\n    };\n\n    const showTrial = () => {\n      on_load();\n\n      load_time = Math.round(performance.now() - start_time);\n\n      var style = `\n          <style id=\"webgazer-center-style\">\n            #webgazerVideoContainer { top: 20px !important; left: calc(50% - 160px) !important;}\n          </style>\n        `;\n      document.querySelector(\"head\").insertAdjacentHTML(\"beforeend\", style);\n\n      var html = `\n          <div id='webgazer-init-container' style='position: relative; width:100vw; height:100vh'>\n          </div>`;\n\n      display_element.innerHTML = html;\n\n      this.jsPsych.extensions[\"webgazer\"].showVideo();\n      this.jsPsych.extensions[\"webgazer\"].resume();\n\n      var wg_container = display_element.querySelector(\"#webgazer-init-container\");\n\n      wg_container.innerHTML = `\n          <div style='position: absolute; top: max(260px, 40%); left: calc(50% - 400px); width:800px;'>\n          ${trial.instructions}\n          <button id='jspsych-wg-cont' class='jspsych-btn' disabled>${trial.button_text}</button>\n          </div>`;\n\n      if (is_face_detect_green()) {\n        (document.querySelector(\"#jspsych-wg-cont\") as HTMLButtonElement).disabled = false;\n      } else {\n        var observer = new MutationObserver(face_detect_event_observer);\n        observer.observe(document, {\n          attributes: true,\n          attributeFilter: [\"style\"],\n          subtree: true,\n        });\n      }\n\n      document.querySelector(\"#jspsych-wg-cont\").addEventListener(\"click\", () => {\n        if (observer) {\n          observer.disconnect();\n        }\n        end_trial();\n      });\n    };\n\n    if (!this.jsPsych.extensions.webgazer.isInitialized()) {\n      this.jsPsych.extensions.webgazer\n        .start()\n        .then(() => {\n          showTrial();\n        })\n        .catch((error) => {\n          console.log(error);\n          display_element.innerHTML = `<p>The experiment cannot continue because the eye tracker failed to start.</p>\n              <p>This may be because of a technical problem or because you did not grant permission for the page to use your camera.</p>`;\n        });\n    } else {\n      showTrial();\n    }\n\n    function is_face_detect_green() {\n      if (document.querySelector(\"#webgazerFaceFeedbackBox\")) {\n        return (\n          (document.querySelector(\"#webgazerFaceFeedbackBox\") as HTMLElement).style.borderColor ==\n          \"green\"\n        );\n      } else {\n        return false;\n      }\n    }\n\n    function face_detect_event_observer(mutationsList, observer) {\n      if (mutationsList[0].target == document.querySelector(\"#webgazerFaceFeedbackBox\")) {\n        if (\n          mutationsList[0].type == \"attributes\" &&\n          mutationsList[0].target.style.borderColor == \"green\"\n        ) {\n          (document.querySelector(\"#jspsych-wg-cont\") as HTMLButtonElement).disabled = false;\n        }\n        if (\n          mutationsList[0].type == \"attributes\" &&\n          mutationsList[0].target.style.borderColor == \"red\"\n        ) {\n          (document.querySelector(\"#jspsych-wg-cont\") as HTMLButtonElement).disabled = true;\n        }\n      }\n    }\n\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n}\n\nexport default WebgazerInitCameraPlugin;\n"],"names":["info","name","parameters","instructions","type","ParameterType","HTML_STRING","default","button_text","STRING","WebgazerInitCameraPlugin","jsPsych","_classCallCheck","this","value","display_element","trial","on_load","trial_complete","load_time","_this","start_time","performance","now","showTrial","Math","round","document","querySelector","insertAdjacentHTML","innerHTML","extensions","showVideo","resume","concat","style","borderColor","disabled","observer","MutationObserver","face_detect_event_observer","observe","attributes","attributeFilter","subtree","addEventListener","disconnect","pause","hideVideo","pluginAPI","clearAllTimeouts","trial_data","remove","finishTrial","end_trial","mutationsList","target","webgazer","isInitialized","start","then","error","console","log","Promise","resolve"],"mappings":"6NAEA,IAAMA,EAAc,CAClBC,KAAM,uBACNC,WAAY,CAEVC,aAAc,CACZC,KAAMC,EAAaA,cAACC,YACpBC,QAAA,6cAOFC,YAAa,CACXJ,KAAMC,EAAaA,cAACI,OACpBF,QAAS,cAiBTG,aAGJ,SAAAA,EAAoBC,gGAAgBC,CAAAC,KAAAH,GAAhBG,KAAOF,QAAPA,CAAoB,uCAExCG,MAAA,SAAMC,EAA8BC,EAAwBC,GAAmB,IACzEC,EAGAC,EAJyEC,EAAAP,KAGzEQ,EAAaC,YAAYC,MA2BvBC,EAAY,WA6BhB,GA5BAP,IAEAE,EAAYM,KAAKC,MAAMJ,YAAYC,MAAQF,GAO3CM,SAASC,cAAc,QAAQC,mBAAmB,YALlD,kLAWAd,EAAgBe,UAJhB,yHAMAV,EAAKT,QAAQoB,WAAb,SAAoCC,YACpCZ,EAAKT,QAAQoB,WAAb,SAAoCE,SAEjBlB,EAAgBa,cAAc,4BAEpCE,UAEPd,wHAAAA,OAAAA,EAAMb,aAFZ,0EAAA+B,OAGgElB,EAAMR,YAHtE,+BAyCImB,SAASC,cAAc,6BAGvB,SADCD,SAASC,cAAc,4BAA4CO,MAAMC,YApC3ET,SAASC,cAAc,oBAA0CS,UAAW,MACxE,CACL,IAAIC,EAAW,IAAIC,iBAAiBC,GACpCF,EAASG,QAAQd,SAAU,CACzBe,YAAY,EACZC,gBAAiB,CAAC,SAClBC,SAAS,GAEZ,CAEDjB,SAASC,cAAc,oBAAoBiB,iBAAiB,SAAS,WAC/DP,GACFA,EAASQ,aAjEG,WAChB1B,EAAKT,QAAQoB,WAAb,SAAoCgB,QACpC3B,EAAKT,QAAQoB,WAAb,SAAoCiB,YAGpC5B,EAAKT,QAAQsC,UAAUC,mBAGvB,IAAIC,EAAa,CACfhC,UAAWA,GAIbJ,EAAgBe,UAAY,GAE5BH,SAASC,cAAc,0BAA0BwB,SAGjDhC,EAAKT,QAAQ0C,YAAYF,GAEzBjC,IA+CEoC,OA8BJ,SAASd,EAA2Be,EAAejB,GAC7CiB,EAAc,GAAGC,QAAU7B,SAASC,cAAc,8BAEzB,cAAzB2B,EAAc,GAAGnD,MAC4B,SAA7CmD,EAAc,GAAGC,OAAOrB,MAAMC,cAE7BT,SAASC,cAAc,oBAA0CS,UAAW,GAGpD,cAAzBkB,EAAc,GAAGnD,MAC4B,OAA7CmD,EAAc,GAAGC,OAAOrB,MAAMC,cAE7BT,SAASC,cAAc,oBAA0CS,UAAW,GAGlF,CAED,OA3CKxB,KAAKF,QAAQoB,WAAW0B,SAASC,gBAYpClC,IAXAX,KAAKF,QAAQoB,WAAW0B,SACrBE,QACAC,MAAK,WACJpC,OAHJ,OAKS,SAACqC,GACNC,QAAQC,IAAIF,GACZ9C,EAAgBe,UAAhB,8NAmCC,IAAIkC,SAAQ,SAACC,GAClB/C,EAAiB+C,CAClB,GACF,gGAhIMvD,EAAIV,KAAGA"}