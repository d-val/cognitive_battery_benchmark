{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"video-keyboard-response\",\n  parameters: {\n    /** Array of the video file(s) to play. Video can be provided in multiple file formats for better cross-browser support. */\n    stimulus: {\n      type: ParameterType.VIDEO,\n      pretty_name: \"Video\",\n      default: undefined,\n      array: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** The width of the video in pixels. */\n    width: {\n      type: ParameterType.INT,\n      pretty_name: \"Width\",\n      default: \"\",\n    },\n    /** The height of the video display in pixels. */\n    height: {\n      type: ParameterType.INT,\n      pretty_name: \"Height\",\n      default: \"\",\n    },\n    /** If true, the video will begin playing as soon as it has loaded. */\n    autoplay: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Autoplay\",\n      default: true,\n    },\n    /** If true, the subject will be able to pause the video or move the playback to any point in the video. */\n    controls: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Controls\",\n      default: false,\n    },\n    /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n    start: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Start\",\n      default: null,\n    },\n    /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n    stop: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Stop\",\n      default: null,\n    },\n    /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n    rate: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Rate\",\n      default: 1,\n    },\n    /** If true, the trial will end immediately after the video finishes playing. */\n    trial_ends_after_video: {\n      type: ParameterType.BOOL,\n      pretty_name: \"End trial after video finishes\",\n      default: false,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, the trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** If true, then responses are allowed while the video is playing. If false, then the video must finish playing before a response is accepted. */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response allowed while playing\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **video-keyboard-response**\n *\n * jsPsych plugin for playing a video file and getting a keyboard response\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-video-keyboard-response/ video-keyboard-response plugin documentation on jspsych.org}\n */\nclass VideoKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // catch mistake where stimuli are not an array\n    if (!Array.isArray(trial.stimulus)) {\n      throw new Error(`\n        The stimulus property for the video-keyboard-response plugin must be an array\n        of files. See https://www.jspsych.org/latest/plugins/video-keyboard-response/#parameters\n      `);\n    }\n\n    // setup stimulus\n    var video_html = \"<div>\";\n    video_html += '<video id=\"jspsych-video-keyboard-response-stimulus\"';\n\n    if (trial.width) {\n      video_html += ' width=\"' + trial.width + '\"';\n    }\n    if (trial.height) {\n      video_html += ' height=\"' + trial.height + '\"';\n    }\n    if (trial.autoplay && trial.start == null) {\n      // if autoplay is true and the start time is specified, then the video will start automatically\n      // via the play() method, rather than the autoplay attribute, to prevent showing the first frame\n      video_html += \" autoplay \";\n    }\n    if (trial.controls) {\n      video_html += \" controls \";\n    }\n    if (trial.start !== null) {\n      // hide video element when page loads if the start time is specified,\n      // to prevent the video element from showing the first frame\n      video_html += ' style=\"visibility: hidden;\"';\n    }\n    video_html += \">\";\n\n    var video_preload_blob = this.jsPsych.pluginAPI.getVideoBuffer(trial.stimulus[0]);\n    if (!video_preload_blob) {\n      for (var i = 0; i < trial.stimulus.length; i++) {\n        var file_name = trial.stimulus[i];\n        if (file_name.indexOf(\"?\") > -1) {\n          file_name = file_name.substring(0, file_name.indexOf(\"?\"));\n        }\n        var type = file_name.substr(file_name.lastIndexOf(\".\") + 1);\n        type = type.toLowerCase();\n        if (type == \"mov\") {\n          console.warn(\n            \"Warning: video-keyboard-response plugin does not reliably support .mov files.\"\n          );\n        }\n        video_html += '<source src=\"' + file_name + '\" type=\"video/' + type + '\">';\n      }\n    }\n    video_html += \"</video>\";\n    video_html += \"</div>\";\n\n    // add prompt if there is one\n    if (trial.prompt !== null) {\n      video_html += trial.prompt;\n    }\n\n    display_element.innerHTML = video_html;\n\n    var video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-keyboard-response-stimulus\"\n    );\n\n    if (video_preload_blob) {\n      video_element.src = video_preload_blob;\n    }\n\n    video_element.onended = () => {\n      if (trial.trial_ends_after_video) {\n        end_trial();\n      }\n      if (trial.response_allowed_while_playing == false && !trial.trial_ends_after_video) {\n        // start keyboard listener\n        var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: \"performance\",\n          persist: false,\n          allow_held_key: false,\n        });\n      }\n    };\n\n    video_element.playbackRate = trial.rate;\n\n    // if video start time is specified, hide the video and set the starting time\n    // before showing and playing, so that the video doesn't automatically show the first frame\n    if (trial.start !== null) {\n      video_element.pause();\n      video_element.onseeked = () => {\n        video_element.style.visibility = \"visible\";\n        video_element.muted = false;\n        if (trial.autoplay) {\n          video_element.play();\n        } else {\n          video_element.pause();\n        }\n        video_element.onseeked = () => {};\n      };\n      video_element.onplaying = () => {\n        video_element.currentTime = trial.start;\n        video_element.onplaying = () => {};\n      };\n      // fix for iOS/MacOS browsers: videos aren't seekable until they start playing, so need to hide/mute, play,\n      // change current time, then show/unmute\n      video_element.muted = true;\n      video_element.play();\n    }\n\n    let stopped = false;\n    if (trial.stop !== null) {\n      video_element.addEventListener(\"timeupdate\", (e) => {\n        var currenttime = video_element.currentTime;\n        if (currenttime >= trial.stop) {\n          if (!trial.response_allowed_while_playing) {\n            var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n              callback_function: after_response,\n              valid_responses: trial.choices,\n              rt_method: \"performance\",\n              persist: false,\n              allow_held_key: false,\n            });\n          }\n          video_element.pause();\n          if (trial.trial_ends_after_video && !stopped) {\n            // this is to prevent end_trial from being called twice, because the timeupdate event\n            // can fire in quick succession\n            stopped = true;\n            end_trial();\n          }\n        }\n      });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n      // stop the video file if it is playing\n      // remove end event listeners if they exist\n      display_element\n        .querySelector<HTMLVideoElement>(\"#jspsych-video-keyboard-response-stimulus\")\n        .pause();\n      display_element.querySelector<HTMLVideoElement>(\n        \"#jspsych-video-keyboard-response-stimulus\"\n      ).onended = () => {};\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-video-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\" && trial.response_allowed_while_playing) {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const video_element = display_element.querySelector<HTMLVideoElement>(\n      \"#jspsych-video-button-response-stimulus\"\n    );\n\n    const respond = () => {\n      if (data.rt !== null) {\n        this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n      }\n    };\n\n    if (!trial.response_allowed_while_playing) {\n      video_element.addEventListener(\"ended\", respond);\n    } else {\n      respond();\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default VideoKeyboardResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","VIDEO","pretty_name","default","undefined","array","choices","KEYS","prompt","HTML_STRING","width","INT","height","autoplay","BOOL","controls","start","FLOAT","stop","rate","trial_ends_after_video","trial_duration","response_ends_trial","response_allowed_while_playing","VideoKeyboardResponsePlugin","jsPsych","_classCallCheck","this","display_element","trial","_this","Array","isArray","Error","video_html","video_preload_blob","pluginAPI","getVideoBuffer","i","length","file_name","indexOf","substring","substr","lastIndexOf","toLowerCase","console","warn","innerHTML","video_element","querySelector","src","onended","end_trial","getKeyboardResponse","callback_function","after_response","valid_responses","rt_method","persist","allow_held_key","playbackRate","pause","onseeked","style","visibility","muted","play","onplaying","currentTime","stopped","addEventListener","e","response","rt","key","clearAllTimeouts","cancelAllKeyboardResponses","trial_data","finishTrial","className","setTimeout","value","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","data","create_simulation_data","_this2","getDisplayElement","respond","pressKey","default_data","randomization","sampleExGaussian","getValidKey","mergeSimulationData","ensureSimulationDataConsistency"],"mappings":"gOAEA,IAAMA,EAAc,CAClBC,KAAM,0BACNC,WAAY,CAEVC,SAAU,CACRC,KAAMC,EAAaA,cAACC,MACpBC,YAAa,QACbC,aAASC,EACTC,OAAO,GAGTC,QAAS,CACPP,KAAMC,EAAaA,cAACO,KACpBL,YAAa,UACbC,QAAS,YAGXK,OAAQ,CACNT,KAAMC,EAAaA,cAACS,YACpBP,YAAa,SACbC,QAAS,MAGXO,MAAO,CACLX,KAAMC,EAAaA,cAACW,IACpBT,YAAa,QACbC,QAAS,IAGXS,OAAQ,CACNb,KAAMC,EAAaA,cAACW,IACpBT,YAAa,SACbC,QAAS,IAGXU,SAAU,CACRd,KAAMC,EAAaA,cAACc,KACpBZ,YAAa,WACbC,SAAS,GAGXY,SAAU,CACRhB,KAAMC,EAAaA,cAACc,KACpBZ,YAAa,WACbC,SAAS,GAGXa,MAAO,CACLjB,KAAMC,EAAaA,cAACiB,MACpBf,YAAa,QACbC,QAAS,MAGXe,KAAM,CACJnB,KAAMC,EAAaA,cAACiB,MACpBf,YAAa,OACbC,QAAS,MAGXgB,KAAM,CACJpB,KAAMC,EAAaA,cAACiB,MACpBf,YAAa,OACbC,QAAS,GAGXiB,uBAAwB,CACtBrB,KAAMC,EAAaA,cAACc,KACpBZ,YAAa,iCACbC,SAAS,GAGXkB,eAAgB,CACdtB,KAAMC,EAAaA,cAACW,IACpBT,YAAa,iBACbC,QAAS,MAGXmB,oBAAqB,CACnBvB,KAAMC,EAAaA,cAACc,KACpBZ,YAAa,sBACbC,SAAS,GAGXoB,+BAAgC,CAC9BxB,KAAMC,EAAaA,cAACc,KACpBZ,YAAa,iCACbC,SAAS,KAeTqB,aAGJ,SAAAA,EAAoBC,gGAAgBC,CAAAC,KAAAH,GAAhBG,KAAOF,QAAPA,CAAoB,4CAExC,SAAMG,EAA8BC,GAAsB,IAAAC,EAAAH,KAExD,IAAKI,MAAMC,QAAQH,EAAM/B,UACvB,MAAM,IAAImC,MAAV,qMAOF,IAAIC,EAAa,QACjBA,GAAc,uDAEVL,EAAMnB,QACRwB,GAAc,WAAaL,EAAMnB,MAAQ,KAEvCmB,EAAMjB,SACRsB,GAAc,YAAcL,EAAMjB,OAAS,KAEzCiB,EAAMhB,UAA2B,MAAfgB,EAAMb,QAG1BkB,GAAc,cAEZL,EAAMd,WACRmB,GAAc,cAEI,OAAhBL,EAAMb,QAGRkB,GAAc,gCAEhBA,GAAc,IAEd,IAAIC,EAAqBR,KAAKF,QAAQW,UAAUC,eAAeR,EAAM/B,SAAS,IAC9E,IAAKqC,EACH,IAAK,IAAIG,EAAI,EAAGA,EAAIT,EAAM/B,SAASyC,OAAQD,IAAK,CAC9C,IAAIE,EAAYX,EAAM/B,SAASwC,GAC3BE,EAAUC,QAAQ,MAAQ,IAC5BD,EAAYA,EAAUE,UAAU,EAAGF,EAAUC,QAAQ,OAEvD,IAAI1C,EAAOyC,EAAUG,OAAOH,EAAUI,YAAY,KAAO,GAE7C,QADZ7C,EAAOA,EAAK8C,gBAEVC,QAAQC,KACN,iFAGJb,GAAc,gBAAkBM,EAAY,iBAAmBzC,EAAO,IACvE,CAEHmC,GAAc,WACdA,GAAc,SAGO,OAAjBL,EAAMrB,SACR0B,GAAcL,EAAMrB,QAGtBoB,EAAgBoB,UAAYd,EAE5B,IAAIe,EAAgBrB,EAAgBsB,cAClC,6CAGEf,IACFc,EAAcE,IAAMhB,GAGtBc,EAAcG,QAAU,WAClBvB,EAAMT,wBACRiC,IAE0C,GAAxCxB,EAAMN,gCAA4CM,EAAMT,wBAEnCU,EAAKL,QAAQW,UAAUkB,oBAAoB,CAChEC,kBAAmBC,EACnBC,gBAAiB5B,EAAMvB,QACvBoD,UAAW,cACXC,SAAS,EACTC,gBAAgB,KAKtBX,EAAcY,aAAehC,EAAMV,KAIf,OAAhBU,EAAMb,QACRiC,EAAca,QACdb,EAAcc,SAAW,WACvBd,EAAce,MAAMC,WAAa,UACjChB,EAAciB,OAAQ,EAClBrC,EAAMhB,SACRoC,EAAckB,OAEdlB,EAAca,QAEhBb,EAAcc,SAAW,cAE3Bd,EAAcmB,UAAY,WACxBnB,EAAcoB,YAAcxC,EAAMb,MAClCiC,EAAcmB,UAAY,YAC3B,EAGDnB,EAAciB,OAAQ,EACtBjB,EAAckB,QAGhB,IAAIG,GAAU,EACK,OAAfzC,EAAMX,MACR+B,EAAcsB,iBAAiB,cAAc,SAACC,GAC1BvB,EAAcoB,aACbxC,EAAMX,OAClBW,EAAMN,gCACcO,EAAKL,QAAQW,UAAUkB,oBAAoB,CAChEC,kBAAmBC,EACnBC,gBAAiB5B,EAAMvB,QACvBoD,UAAW,cACXC,SAAS,EACTC,gBAAgB,IAGpBX,EAAca,QACVjC,EAAMT,yBAA2BkD,IAGnCA,GAAU,EACVjB,SAOR,IAAIoB,EAAW,CACbC,GAAI,KACJC,IAAK,MAIDtB,EAAY,WAEhBvB,EAAKL,QAAQW,UAAUwC,mBAGvB9C,EAAKL,QAAQW,UAAUyC,6BAIvBjD,EACGsB,cAAgC,6CAChCY,QACHlC,EAAgBsB,cACd,6CACAE,QAAU,WAAO,EAGnB,IAAI0B,EAAa,CACfJ,GAAID,EAASC,GACb5E,SAAU+B,EAAM/B,SAChB2E,SAAUA,EAASE,KAIrB/C,EAAgBoB,UAAY,GAG5BlB,EAAKL,QAAQsD,YAAYD,EAC1B,EAGGtB,EAAiB,SAAC7D,GAGpBiC,EAAgBsB,cAAc,6CAA6C8B,WACzE,aAGkB,MAAhBP,EAASE,MACXF,EAAW9E,GAGTkC,EAAMP,qBACR+B,GAEH,EAGoB,WAAjBxB,EAAMvB,SAAwBuB,EAAMN,gCACfI,KAAKF,QAAQW,UAAUkB,oBAAoB,CAChEC,kBAAmBC,EACnBC,gBAAiB5B,EAAMvB,QACvBoD,UAAW,cACXC,SAAS,EACTC,gBAAgB,IAKS,OAAzB/B,EAAMR,gBACRM,KAAKF,QAAQW,UAAU6C,WAAW5B,EAAWxB,EAAMR,eAEtD,mBAED6D,MAAA,SACErD,EACAsD,EACAC,EACAC,GAEuB,aAAnBF,IACFE,IACA1D,KAAK2D,mBAAmBzD,EAAOuD,IAEV,UAAnBD,GACFxD,KAAK4D,gBAAgB1D,EAAOuD,EAAoBC,EAEnD,mCAEO,SAAmBxD,EAAwBuD,GACjD,IAAMI,EAAO7D,KAAK8D,uBAAuB5D,EAAOuD,GAEhDzD,KAAKF,QAAQsD,YAAYS,EAC1B,0BAEON,MAAA,SAAgBrD,EAAwBuD,EAAoBC,GAAyB,IAAAK,EAAA/D,KACrF6D,EAAO7D,KAAK8D,uBAAuB5D,EAAOuD,GAE1CxD,EAAkBD,KAAKF,QAAQkE,oBAErChE,KAAKE,MAAMD,EAAiBC,GAC5BwD,IAEA,IAAMpC,EAAgBrB,EAAgBsB,cACpC,2CAGI0C,EAAU,WACE,OAAZJ,EAAKd,IACPgB,EAAKjE,QAAQW,UAAUyD,SAASL,EAAKf,SAAUe,EAAKd,KAInD7C,EAAMN,+BAGTqE,IAFA3C,EAAcsB,iBAAiB,QAASqB,EAI3C,uCAEO,SAAuB/D,EAAwBuD,GACrD,IAAMU,EAAe,CACnBhG,SAAU+B,EAAM/B,SAChB4E,GAAI/C,KAAKF,QAAQsE,cAAcC,iBAAiB,IAAK,GAAI,EAAI,KAAK,GAClEvB,SAAU9C,KAAKF,QAAQW,UAAU6D,YAAYpE,EAAMvB,UAG/CkF,EAAO7D,KAAKF,QAAQW,UAAU8D,oBAAoBJ,EAAcV,GAItE,OAFAzD,KAAKF,QAAQW,UAAU+D,gCAAgCtE,EAAO2D,GAEvDA,CACR,iGA7QMhE,EAAI7B,KAAGA"}