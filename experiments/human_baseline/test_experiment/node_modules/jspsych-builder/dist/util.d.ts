import { Pragmas } from "./tasks";
/**
 * Parses and returns the docblock pragma data from a specified file
 *
 * @param {string} filePath The path of the file to parse the data from
 */
export declare function loadDocblockPragmas(filePath: string): {
    [x: string]: string | string[];
};
/**
 * Given two objects a and b, returns a set of top-level keys that have been modified, added, or
 * deleted in b, compared to a.
 */
export declare function getDifferingKeys(a: Record<string, any>, b: Record<string, any>): Set<string>;
/**
 * Given a list of paths, returns two lists [directories, files] of directory and file paths. Throws
 * an ENOENT error if a provided path does not exist.
 */
export declare function separateDirectoryAndFilePaths(paths: string[]): Promise<string[][]>;
/**
 * Returns the file paths of all (possibly nested) files in a directory.
 */
export declare function resolveFilePaths(directoryPath: string): Promise<string[]>;
export declare type AssetPaths = {
    images: string[];
    audio: string[];
    video: string[];
    misc: string[];
};
/**
 * Given a list of directory paths and a list of individual file paths, inspects the file extensions
 * of all (nested) files, sorts the paths into an `AssetPaths` object, and returns it.
 */
export declare function getAssetPaths(directories: readonly string[], files: readonly string[]): Promise<AssetPaths>;
/**
 * Given the docblock pragmas from the experiment file, extracts the specified image, audio, and
 * video directories and returns an object containing the respective paths.
 */
export declare function getDeprecatedAssetDirectories(pragmas: Pragmas): AssetPaths;
/**
 * Given the object returned by `getDeprecatedAssetDirectories()`, reads the specified directories
 * recursively and returns an object containing the respective file paths.
 */
export declare function getDeprecatedAssetPaths(assetDirectories: AssetPaths): Promise<AssetPaths>;
